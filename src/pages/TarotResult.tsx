
import { useState, useEffect } from 'react';
import { useSearchParams, Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, Sparkles, RotateCcw, Star, Heart, Eye } from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import TarotCard from '@/components/TarotCard';
import { getRandomCards, getTopicSpecificInterpretation, TarotCardData } from '@/data/tarotData';

const TarotResult = () => {
  const [searchParams] = useSearchParams();
  const deck = searchParams.get('deck');
  const topic = searchParams.get('topic');
  
  const [cards, setCards] = useState<TarotCardData[]>([]);
  const [revealedCards, setRevealedCards] = useState<boolean[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const topicNames: Record<string, string> = {
    'love': 'T√¨nh Y√™u & T√¨nh C·∫£m',
    'career': 'S·ª± Nghi·ªáp & C√¥ng Vi·ªác',
    'money': 'T√†i Ch√≠nh & Ti·ªÅn B·∫°c',
    'family': 'Gia ƒê√¨nh & Ng∆∞·ªùi Th√¢n',
    'general': 'T·ªïng Quan Cu·ªôc S·ªëng'
  };

  const deckNames: Record<string, string> = {
    'classic': 'B·ªô B√†i Tarot C·ªï ƒêi·ªÉn',
    'rider-waite': 'Rider-Waite Tarot',
    'mystical': 'B·ªô B√†i Huy·ªÅn B√≠'
  };

  const cardPositions = ['Qu√° Kh·ª©', 'Hi·ªán T·∫°i', 'T∆∞∆°ng Lai'];
  const cardMeanings: Record<string, string> = {
    'Qu√° Kh·ª©': 'Nh·ªØng ·∫£nh h∆∞·ªüng v√† kinh nghi·ªám t·ª´ qu√° kh·ª© ƒë√£ ƒë·ªãnh h√¨nh t√¨nh hu·ªëng hi·ªán t·∫°i c·ªßa b·∫°n',
    'Hi·ªán T·∫°i': 'T√¨nh tr·∫°ng hi·ªán t·∫°i v√† nh·ªØng th√°ch th·ª©c ho·∫∑c c∆° h·ªôi b·∫°n ƒëang ƒë·ªëi m·∫∑t',
    'T∆∞∆°ng Lai': 'Nh·ªØng kh·∫£ nƒÉng v√† h∆∞·ªõng ph√°t tri·ªÉn c√≥ th·ªÉ x·∫£y ra n·∫øu b·∫°n ti·∫øp t·ª•c con ƒë∆∞·ªùng hi·ªán t·∫°i'
  };

  useEffect(() => {
    const timer = setTimeout(() => {
      const selectedCards = getRandomCards(3);
      setCards(selectedCards);
      setRevealedCards(new Array(selectedCards.length).fill(false));
      setIsLoading(false);
    }, 2000);

    return () => clearTimeout(timer);
  }, []);

  const handleRevealCard = (index: number) => {
    setRevealedCards(prev => {
      const newRevealed = [...prev];
      newRevealed[index] = true;
      return newRevealed;
    });
  };

  const handleNewReading = () => {
    setIsLoading(true);
    setRevealedCards([]);
    
    setTimeout(() => {
      const selectedCards = getRandomCards(3);
      setCards(selectedCards);
      setRevealedCards(new Array(selectedCards.length).fill(false));
      setIsLoading(false);
    }, 1500);
  };

  const getOverallReading = () => {
    if (!topic || cards.length === 0) return '';
    
    const readings: Record<string, string> = {
      'love': 'Trong t√¨nh y√™u, h√†nh tr√¨nh c·ªßa b·∫°n t·ª´ qu√° kh·ª© ƒë·∫øn t∆∞∆°ng lai cho th·∫•y s·ª± tr∆∞·ªüng th√†nh v√† ph√°t tri·ªÉn. H√£y h·ªçc h·ªèi t·ª´ nh·ªØng tr·∫£i nghi·ªám ƒë√£ qua, tr√¢n tr·ªçng hi·ªán t·∫°i v√† m·ªü l√≤ng ƒë√≥n nh·∫≠n nh·ªØng ƒëi·ªÅu t·ªët ƒë·∫πp s·∫Øp t·ªõi.',
      'career': 'Con ƒë∆∞·ªùng s·ª± nghi·ªáp c·ªßa b·∫°n ƒëang trong giai ƒëo·∫°n chuy·ªÉn ƒë·ªïi quan tr·ªçng. Nh·ªØng kinh nghi·ªám qu√Ω b√°u t·ª´ qu√° kh·ª© s·∫Ω l√† n·ªÅn t·∫£ng cho th√†nh c√¥ng trong t∆∞∆°ng lai. H√£y ki√™n nh·∫´n v√† tin t∆∞·ªüng v√†o kh·∫£ nƒÉng c·ªßa b·∫£n th√¢n.',
      'money': 'V·ªÅ m·∫∑t t√†i ch√≠nh, b·∫°n ƒëang h·ªçc c√°ch qu·∫£n l√Ω v√† ph√°t tri·ªÉn t√†i s·∫£n m·ªôt c√°ch kh√¥n ngoan. Qu√° kh·ª© ƒë√£ d·∫°y b·∫°n nh·ªØng b√†i h·ªçc qu√Ω gi√°, h√£y √°p d·ª•ng ch√∫ng ƒë·ªÉ t·∫°o n√™n s·ª± th·ªãnh v∆∞·ª£ng b·ªÅn v·ªØng.',
      'family': 'M·ªëi quan h·ªá gia ƒë√¨nh c·ªßa b·∫°n ƒëang tr·∫£i qua nh·ªØng thay ƒë·ªïi t√≠ch c·ª±c. S·ª± hi·ªÉu bi·∫øt v√† t√¨nh y√™u th∆∞∆°ng s·∫Ω gi√∫p h√†n g·∫Øn nh·ªØng t·ªïn th∆∞∆°ng trong qu√° kh·ª© v√† x√¢y d·ª±ng t∆∞∆°ng lai h·∫°nh ph√∫c h∆°n.',
      'general': 'Cu·ªôc s·ªëng c·ªßa b·∫°n ƒëang trong h√†nh tr√¨nh t·ª± kh√°m ph√° v√† ph√°t tri·ªÉn b·∫£n th√¢n. M·ªói giai ƒëo·∫°n ƒë·ªÅu mang l·∫°i nh·ªØng b√†i h·ªçc qu√Ω b√°u, gi√∫p b·∫°n tr·ªü th√†nh phi√™n b·∫£n t·ªët nh·∫•t c·ªßa ch√≠nh m√¨nh.'
    };
    
    return readings[topic] || readings['general'];
  };

  if (!deck || !topic) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">L·ªói: Thi·∫øu th√¥ng tin</h1>
          <Link to="/tarot-reading">
            <Button>Quay l·∫°i ch·ªçn b√†i</Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      <Header />
      
      <main className="pt-20">
        {/* Hero Section */}
        <section className="py-16 hero-gradient relative overflow-hidden">
          <div className="stars"></div>
          <div className="container mx-auto px-4 text-center relative z-10">
            <Link to="/tarot-reading" className="inline-flex items-center text-purple-300 hover:text-purple-100 mb-6 transition-colors">
              <ArrowLeft className="w-5 h-5 mr-2" />
              Quay l·∫°i ch·ªçn b√†i
            </Link>
            
            <div className="mb-6">
              <img 
                src="/lovable-uploads/f06dd398-3fe1-400c-b402-f4b361db1465.png" 
                alt="Soulseer Logo" 
                className="w-16 h-16 mx-auto animate-glow"
              />
            </div>
            
            <h1 className="text-4xl md:text-6xl font-bold mb-6 text-glow">
              <span className="bg-gradient-to-r from-purple-300 to-pink-300 bg-clip-text text-transparent">
                K·∫øt Qu·∫£ B√≥i B√†i
              </span>
            </h1>
            
            <div className="text-lg md:text-xl text-purple-200 mb-8 max-w-2xl mx-auto">
              <p className="mb-2">B·ªô b√†i: <span className="text-white font-semibold">{deckNames[deck]}</span></p>
              <p>Ch·ªß ƒë·ªÅ: <span className="text-white font-semibold">{topicNames[topic]}</span></p>
            </div>
          </div>
        </section>

        {/* Loading Section */}
        {isLoading && (
          <section className="py-16 bg-gradient-to-b from-purple-900 to-black">
            <div className="container mx-auto px-4 text-center">
              <div className="animate-spin text-6xl mb-8">üîÆ</div>
              <h2 className="text-2xl font-bold text-glow mb-4">
                ƒêang k·∫øt n·ªëi v·ªõi v≈© tr·ª•...
              </h2>
              <p className="text-purple-200">C√°c l√° b√†i ƒëang ƒë∆∞·ª£c ch·ªçn d√†nh ri√™ng cho b·∫°n</p>
            </div>
          </section>
        )}

        {/* Cards Section */}
        {!isLoading && (
          <section className="py-16 bg-gradient-to-b from-purple-900 to-black">
            <div className="container mx-auto px-4">
              
              {/* Reading Guide */}
              <Card className="mystic-card mb-12 max-w-4xl mx-auto">
                <CardHeader>
                  <CardTitle className="text-white flex items-center justify-center">
                    <Eye className="w-6 h-6 mr-2" />
                    C√°ch ƒê·ªçc B√†i Tarot
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
                    {cardPositions.map((position, index) => (
                      <div key={position} className="space-y-2">
                        <h3 className="text-lg font-semibold text-purple-300">{position}</h3>
                        <p className="text-purple-100 text-sm">{cardMeanings[position]}</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <h2 className="text-3xl font-bold text-center mb-12 text-glow">
                <span className="bg-gradient-to-r from-purple-300 to-pink-300 bg-clip-text text-transparent">
                  Ba L√° B√†i C·ªßa B·∫°n
                </span>
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto mb-12">
                {cards.map((card, index) => (
                  <div key={card.id} className="text-center">
                    <h3 className="text-lg font-semibold text-purple-300 mb-2">
                      {cardPositions[index]}
                    </h3>
                    <p className="text-sm text-purple-200 mb-4 px-2">
                      {cardMeanings[cardPositions[index]]}
                    </p>
                    <TarotCard
                      card={card}
                      interpretation={getTopicSpecificInterpretation(card, topic)}
                      isRevealed={revealedCards[index]}
                      onReveal={() => handleRevealCard(index)}
                    />
                  </div>
                ))}
              </div>

              {/* Detailed Analysis */}
              {revealedCards.every(revealed => revealed) && (
                <div className="max-w-4xl mx-auto space-y-8">
                  {/* Individual Card Analysis */}
                  <Card className="mystic-card">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center">
                        <Star className="w-6 h-6 mr-2" />
                        Ph√¢n T√≠ch Chi Ti·∫øt T·ª´ng L√° B√†i
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      {cards.map((card, index) => (
                        <div key={card.id} className="border-l-4 border-purple-400 pl-4">
                          <h4 className="text-lg font-semibold text-purple-300 mb-2">
                            {cardPositions[index]}: {card.name}
                          </h4>
                          <p className="text-purple-100 mb-3">
                            {getTopicSpecificInterpretation(card, topic)}
                          </p>
                          <div className="flex flex-wrap gap-2">
                            {card.keywords.map((keyword) => (
                              <span 
                                key={keyword}
                                className="bg-gradient-to-r from-purple-600/30 to-pink-600/30 text-purple-200 px-2 py-1 rounded-full text-xs border border-purple-400/20"
                              >
                                {keyword}
                              </span>
                            ))}
                          </div>
                        </div>
                      ))}
                    </CardContent>
                  </Card>

                  {/* Overall Summary */}
                  <Card className="mystic-card">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center">
                        <Heart className="w-6 h-6 mr-2" />
                        T·ªïng K·∫øt & L·ªùi Khuy√™n
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-purple-100 text-lg leading-relaxed mb-6">
                        {getOverallReading()}
                      </p>
                      <div className="bg-gradient-to-r from-purple-800/30 to-pink-800/30 p-4 rounded-lg border border-purple-400/20">
                        <h4 className="text-purple-300 font-semibold mb-2">L·ªùi khuy√™n t·ª´ Soulseer:</h4>
                        <p className="text-purple-100">
                          Nh·ªõ r·∫±ng, c√°c l√° b√†i Tarot ch·ªâ l√† c√¥ng c·ª• ƒë·ªÉ ph·∫£n √°nh nƒÉng l∆∞·ª£ng hi·ªán t·∫°i v√† nh·ªØng kh·∫£ nƒÉng c√≥ th·ªÉ x·∫£y ra. 
                          T∆∞∆°ng lai lu√¥n n·∫±m trong tay b·∫°n, v√† nh·ªØng quy·∫øt ƒë·ªãnh b·∫°n ƒë∆∞a ra h√¥m nay s·∫Ω t·∫°o n√™n ng√†y mai. 
                          H√£y s·ª≠ d·ª•ng nh·ªØng th√¥ng ƒëi·ªáp n√†y nh∆∞ m·ªôt ngu·ªìn c·∫£m h·ª©ng ƒë·ªÉ t·∫°o ra cu·ªôc s·ªëng m√† b·∫°n mong mu·ªën.
                        </p>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Action Buttons */}
                  <div className="flex flex-col sm:flex-row gap-4 justify-center">
                    <Button
                      onClick={handleNewReading}
                      className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold px-8 py-3 rounded-full animate-glow"
                    >
                      <RotateCcw className="w-5 h-5 mr-2" />
                      B√≥i L·∫°i
                    </Button>
                    
                    <Link to="/tarot-reading">
                      <Button
                        variant="outline"
                        className="border-purple-400 text-purple-400 hover:bg-purple-400 hover:text-white px-8 py-3 rounded-full"
                      >
                        <Sparkles className="w-5 h-5 mr-2" />
                        Ch·ªçn Ch·ªß ƒê·ªÅ Kh√°c
                      </Button>
                    </Link>

                    <Link to="/ai-reading">
                      <Button
                        variant="outline"
                        className="border-pink-400 text-pink-400 hover:bg-pink-400 hover:text-white px-8 py-3 rounded-full"
                      >
                        <Sparkles className="w-5 h-5 mr-2" />
                        H·ªèi AI Th√™m
                      </Button>
                    </Link>
                  </div>
                </div>
              )}
            </div>
          </section>
        )}
      </main>

      <Footer />
    </div>
  );
};

export default TarotResult;
